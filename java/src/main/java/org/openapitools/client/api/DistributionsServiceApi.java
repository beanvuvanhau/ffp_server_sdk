/*
 * api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.46.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Distribution;
import org.openapitools.client.model.DistributionCreateRequest;
import org.openapitools.client.model.DistributionUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DistributionsServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DistributionsServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DistributionsServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for distributionsServiceCreate
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param ruleId  (required)
     * @param distributionCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionsServiceCreateCall(String namespaceKey, String flagKey, String ruleId, DistributionCreateRequest distributionCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = distributionCreateRequest;

        // create path and map variables
        String localVarPath = "/api/v1/namespaces/{namespaceKey}/flags/{flagKey}/rules/{ruleId}/distributions"
            .replace("{" + "namespaceKey" + "}", localVarApiClient.escapeString(namespaceKey.toString()))
            .replace("{" + "flagKey" + "}", localVarApiClient.escapeString(flagKey.toString()))
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distributionsServiceCreateValidateBeforeCall(String namespaceKey, String flagKey, String ruleId, DistributionCreateRequest distributionCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespaceKey' is set
        if (namespaceKey == null) {
            throw new ApiException("Missing the required parameter 'namespaceKey' when calling distributionsServiceCreate(Async)");
        }

        // verify the required parameter 'flagKey' is set
        if (flagKey == null) {
            throw new ApiException("Missing the required parameter 'flagKey' when calling distributionsServiceCreate(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling distributionsServiceCreate(Async)");
        }

        // verify the required parameter 'distributionCreateRequest' is set
        if (distributionCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'distributionCreateRequest' when calling distributionsServiceCreate(Async)");
        }

        return distributionsServiceCreateCall(namespaceKey, flagKey, ruleId, distributionCreateRequest, _callback);

    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param ruleId  (required)
     * @param distributionCreateRequest  (required)
     * @return Distribution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Distribution distributionsServiceCreate(String namespaceKey, String flagKey, String ruleId, DistributionCreateRequest distributionCreateRequest) throws ApiException {
        ApiResponse<Distribution> localVarResp = distributionsServiceCreateWithHttpInfo(namespaceKey, flagKey, ruleId, distributionCreateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param ruleId  (required)
     * @param distributionCreateRequest  (required)
     * @return ApiResponse&lt;Distribution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Distribution> distributionsServiceCreateWithHttpInfo(String namespaceKey, String flagKey, String ruleId, DistributionCreateRequest distributionCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = distributionsServiceCreateValidateBeforeCall(namespaceKey, flagKey, ruleId, distributionCreateRequest, null);
        Type localVarReturnType = new TypeToken<Distribution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param ruleId  (required)
     * @param distributionCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionsServiceCreateAsync(String namespaceKey, String flagKey, String ruleId, DistributionCreateRequest distributionCreateRequest, final ApiCallback<Distribution> _callback) throws ApiException {

        okhttp3.Call localVarCall = distributionsServiceCreateValidateBeforeCall(namespaceKey, flagKey, ruleId, distributionCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<Distribution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for distributionsServiceDelete
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param ruleId  (required)
     * @param id  (required)
     * @param variantId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionsServiceDeleteCall(String namespaceKey, String flagKey, String ruleId, String id, String variantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/namespaces/{namespaceKey}/flags/{flagKey}/rules/{ruleId}/distributions/{id}"
            .replace("{" + "namespaceKey" + "}", localVarApiClient.escapeString(namespaceKey.toString()))
            .replace("{" + "flagKey" + "}", localVarApiClient.escapeString(flagKey.toString()))
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (variantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("variantId", variantId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distributionsServiceDeleteValidateBeforeCall(String namespaceKey, String flagKey, String ruleId, String id, String variantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespaceKey' is set
        if (namespaceKey == null) {
            throw new ApiException("Missing the required parameter 'namespaceKey' when calling distributionsServiceDelete(Async)");
        }

        // verify the required parameter 'flagKey' is set
        if (flagKey == null) {
            throw new ApiException("Missing the required parameter 'flagKey' when calling distributionsServiceDelete(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling distributionsServiceDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling distributionsServiceDelete(Async)");
        }

        // verify the required parameter 'variantId' is set
        if (variantId == null) {
            throw new ApiException("Missing the required parameter 'variantId' when calling distributionsServiceDelete(Async)");
        }

        return distributionsServiceDeleteCall(namespaceKey, flagKey, ruleId, id, variantId, _callback);

    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param ruleId  (required)
     * @param id  (required)
     * @param variantId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void distributionsServiceDelete(String namespaceKey, String flagKey, String ruleId, String id, String variantId) throws ApiException {
        distributionsServiceDeleteWithHttpInfo(namespaceKey, flagKey, ruleId, id, variantId);
    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param ruleId  (required)
     * @param id  (required)
     * @param variantId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> distributionsServiceDeleteWithHttpInfo(String namespaceKey, String flagKey, String ruleId, String id, String variantId) throws ApiException {
        okhttp3.Call localVarCall = distributionsServiceDeleteValidateBeforeCall(namespaceKey, flagKey, ruleId, id, variantId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param ruleId  (required)
     * @param id  (required)
     * @param variantId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionsServiceDeleteAsync(String namespaceKey, String flagKey, String ruleId, String id, String variantId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = distributionsServiceDeleteValidateBeforeCall(namespaceKey, flagKey, ruleId, id, variantId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for distributionsServiceUpdate
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param ruleId  (required)
     * @param id  (required)
     * @param distributionUpdateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionsServiceUpdateCall(String namespaceKey, String flagKey, String ruleId, String id, DistributionUpdateRequest distributionUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = distributionUpdateRequest;

        // create path and map variables
        String localVarPath = "/api/v1/namespaces/{namespaceKey}/flags/{flagKey}/rules/{ruleId}/distributions/{id}"
            .replace("{" + "namespaceKey" + "}", localVarApiClient.escapeString(namespaceKey.toString()))
            .replace("{" + "flagKey" + "}", localVarApiClient.escapeString(flagKey.toString()))
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distributionsServiceUpdateValidateBeforeCall(String namespaceKey, String flagKey, String ruleId, String id, DistributionUpdateRequest distributionUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespaceKey' is set
        if (namespaceKey == null) {
            throw new ApiException("Missing the required parameter 'namespaceKey' when calling distributionsServiceUpdate(Async)");
        }

        // verify the required parameter 'flagKey' is set
        if (flagKey == null) {
            throw new ApiException("Missing the required parameter 'flagKey' when calling distributionsServiceUpdate(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling distributionsServiceUpdate(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling distributionsServiceUpdate(Async)");
        }

        // verify the required parameter 'distributionUpdateRequest' is set
        if (distributionUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'distributionUpdateRequest' when calling distributionsServiceUpdate(Async)");
        }

        return distributionsServiceUpdateCall(namespaceKey, flagKey, ruleId, id, distributionUpdateRequest, _callback);

    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param ruleId  (required)
     * @param id  (required)
     * @param distributionUpdateRequest  (required)
     * @return Distribution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Distribution distributionsServiceUpdate(String namespaceKey, String flagKey, String ruleId, String id, DistributionUpdateRequest distributionUpdateRequest) throws ApiException {
        ApiResponse<Distribution> localVarResp = distributionsServiceUpdateWithHttpInfo(namespaceKey, flagKey, ruleId, id, distributionUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param ruleId  (required)
     * @param id  (required)
     * @param distributionUpdateRequest  (required)
     * @return ApiResponse&lt;Distribution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Distribution> distributionsServiceUpdateWithHttpInfo(String namespaceKey, String flagKey, String ruleId, String id, DistributionUpdateRequest distributionUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = distributionsServiceUpdateValidateBeforeCall(namespaceKey, flagKey, ruleId, id, distributionUpdateRequest, null);
        Type localVarReturnType = new TypeToken<Distribution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param ruleId  (required)
     * @param id  (required)
     * @param distributionUpdateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionsServiceUpdateAsync(String namespaceKey, String flagKey, String ruleId, String id, DistributionUpdateRequest distributionUpdateRequest, final ApiCallback<Distribution> _callback) throws ApiException {

        okhttp3.Call localVarCall = distributionsServiceUpdateValidateBeforeCall(namespaceKey, flagKey, ruleId, id, distributionUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<Distribution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
