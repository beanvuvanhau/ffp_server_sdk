/*
 * api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.46.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Rule;
import org.openapitools.client.model.RuleCreateRequest;
import org.openapitools.client.model.RuleList;
import org.openapitools.client.model.RuleOrderRequest;
import org.openapitools.client.model.RuleUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RulesServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RulesServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RulesServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for rulesServiceCreate
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param ruleCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulesServiceCreateCall(String namespaceKey, String flagKey, RuleCreateRequest ruleCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ruleCreateRequest;

        // create path and map variables
        String localVarPath = "/api/v1/namespaces/{namespaceKey}/flags/{flagKey}/rules"
            .replace("{" + "namespaceKey" + "}", localVarApiClient.escapeString(namespaceKey.toString()))
            .replace("{" + "flagKey" + "}", localVarApiClient.escapeString(flagKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulesServiceCreateValidateBeforeCall(String namespaceKey, String flagKey, RuleCreateRequest ruleCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespaceKey' is set
        if (namespaceKey == null) {
            throw new ApiException("Missing the required parameter 'namespaceKey' when calling rulesServiceCreate(Async)");
        }

        // verify the required parameter 'flagKey' is set
        if (flagKey == null) {
            throw new ApiException("Missing the required parameter 'flagKey' when calling rulesServiceCreate(Async)");
        }

        // verify the required parameter 'ruleCreateRequest' is set
        if (ruleCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'ruleCreateRequest' when calling rulesServiceCreate(Async)");
        }

        return rulesServiceCreateCall(namespaceKey, flagKey, ruleCreateRequest, _callback);

    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param ruleCreateRequest  (required)
     * @return Rule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Rule rulesServiceCreate(String namespaceKey, String flagKey, RuleCreateRequest ruleCreateRequest) throws ApiException {
        ApiResponse<Rule> localVarResp = rulesServiceCreateWithHttpInfo(namespaceKey, flagKey, ruleCreateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param ruleCreateRequest  (required)
     * @return ApiResponse&lt;Rule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rule> rulesServiceCreateWithHttpInfo(String namespaceKey, String flagKey, RuleCreateRequest ruleCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = rulesServiceCreateValidateBeforeCall(namespaceKey, flagKey, ruleCreateRequest, null);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param ruleCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulesServiceCreateAsync(String namespaceKey, String flagKey, RuleCreateRequest ruleCreateRequest, final ApiCallback<Rule> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulesServiceCreateValidateBeforeCall(namespaceKey, flagKey, ruleCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rulesServiceDelete
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulesServiceDeleteCall(String namespaceKey, String flagKey, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/namespaces/{namespaceKey}/flags/{flagKey}/rules/{id}"
            .replace("{" + "namespaceKey" + "}", localVarApiClient.escapeString(namespaceKey.toString()))
            .replace("{" + "flagKey" + "}", localVarApiClient.escapeString(flagKey.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulesServiceDeleteValidateBeforeCall(String namespaceKey, String flagKey, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespaceKey' is set
        if (namespaceKey == null) {
            throw new ApiException("Missing the required parameter 'namespaceKey' when calling rulesServiceDelete(Async)");
        }

        // verify the required parameter 'flagKey' is set
        if (flagKey == null) {
            throw new ApiException("Missing the required parameter 'flagKey' when calling rulesServiceDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling rulesServiceDelete(Async)");
        }

        return rulesServiceDeleteCall(namespaceKey, flagKey, id, _callback);

    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void rulesServiceDelete(String namespaceKey, String flagKey, String id) throws ApiException {
        rulesServiceDeleteWithHttpInfo(namespaceKey, flagKey, id);
    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> rulesServiceDeleteWithHttpInfo(String namespaceKey, String flagKey, String id) throws ApiException {
        okhttp3.Call localVarCall = rulesServiceDeleteValidateBeforeCall(namespaceKey, flagKey, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulesServiceDeleteAsync(String namespaceKey, String flagKey, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulesServiceDeleteValidateBeforeCall(namespaceKey, flagKey, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for rulesServiceGet
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param id  (required)
     * @param reference  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulesServiceGetCall(String namespaceKey, String flagKey, String id, String reference, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/namespaces/{namespaceKey}/flags/{flagKey}/rules/{id}"
            .replace("{" + "namespaceKey" + "}", localVarApiClient.escapeString(namespaceKey.toString()))
            .replace("{" + "flagKey" + "}", localVarApiClient.escapeString(flagKey.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reference", reference));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulesServiceGetValidateBeforeCall(String namespaceKey, String flagKey, String id, String reference, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespaceKey' is set
        if (namespaceKey == null) {
            throw new ApiException("Missing the required parameter 'namespaceKey' when calling rulesServiceGet(Async)");
        }

        // verify the required parameter 'flagKey' is set
        if (flagKey == null) {
            throw new ApiException("Missing the required parameter 'flagKey' when calling rulesServiceGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling rulesServiceGet(Async)");
        }

        return rulesServiceGetCall(namespaceKey, flagKey, id, reference, _callback);

    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param id  (required)
     * @param reference  (optional)
     * @return Rule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Rule rulesServiceGet(String namespaceKey, String flagKey, String id, String reference) throws ApiException {
        ApiResponse<Rule> localVarResp = rulesServiceGetWithHttpInfo(namespaceKey, flagKey, id, reference);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param id  (required)
     * @param reference  (optional)
     * @return ApiResponse&lt;Rule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rule> rulesServiceGetWithHttpInfo(String namespaceKey, String flagKey, String id, String reference) throws ApiException {
        okhttp3.Call localVarCall = rulesServiceGetValidateBeforeCall(namespaceKey, flagKey, id, reference, null);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param id  (required)
     * @param reference  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulesServiceGetAsync(String namespaceKey, String flagKey, String id, String reference, final ApiCallback<Rule> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulesServiceGetValidateBeforeCall(namespaceKey, flagKey, id, reference, _callback);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rulesServiceList
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param pageToken  (optional)
     * @param reference  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulesServiceListCall(String namespaceKey, String flagKey, Integer limit, Integer offset, String pageToken, String reference, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/namespaces/{namespaceKey}/flags/{flagKey}/rules"
            .replace("{" + "namespaceKey" + "}", localVarApiClient.escapeString(namespaceKey.toString()))
            .replace("{" + "flagKey" + "}", localVarApiClient.escapeString(flagKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (reference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reference", reference));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulesServiceListValidateBeforeCall(String namespaceKey, String flagKey, Integer limit, Integer offset, String pageToken, String reference, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespaceKey' is set
        if (namespaceKey == null) {
            throw new ApiException("Missing the required parameter 'namespaceKey' when calling rulesServiceList(Async)");
        }

        // verify the required parameter 'flagKey' is set
        if (flagKey == null) {
            throw new ApiException("Missing the required parameter 'flagKey' when calling rulesServiceList(Async)");
        }

        return rulesServiceListCall(namespaceKey, flagKey, limit, offset, pageToken, reference, _callback);

    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param pageToken  (optional)
     * @param reference  (optional)
     * @return RuleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RuleList rulesServiceList(String namespaceKey, String flagKey, Integer limit, Integer offset, String pageToken, String reference) throws ApiException {
        ApiResponse<RuleList> localVarResp = rulesServiceListWithHttpInfo(namespaceKey, flagKey, limit, offset, pageToken, reference);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param pageToken  (optional)
     * @param reference  (optional)
     * @return ApiResponse&lt;RuleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleList> rulesServiceListWithHttpInfo(String namespaceKey, String flagKey, Integer limit, Integer offset, String pageToken, String reference) throws ApiException {
        okhttp3.Call localVarCall = rulesServiceListValidateBeforeCall(namespaceKey, flagKey, limit, offset, pageToken, reference, null);
        Type localVarReturnType = new TypeToken<RuleList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param pageToken  (optional)
     * @param reference  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulesServiceListAsync(String namespaceKey, String flagKey, Integer limit, Integer offset, String pageToken, String reference, final ApiCallback<RuleList> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulesServiceListValidateBeforeCall(namespaceKey, flagKey, limit, offset, pageToken, reference, _callback);
        Type localVarReturnType = new TypeToken<RuleList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rulesServiceOrder
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param ruleOrderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulesServiceOrderCall(String namespaceKey, String flagKey, RuleOrderRequest ruleOrderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ruleOrderRequest;

        // create path and map variables
        String localVarPath = "/api/v1/namespaces/{namespaceKey}/flags/{flagKey}/rules/order"
            .replace("{" + "namespaceKey" + "}", localVarApiClient.escapeString(namespaceKey.toString()))
            .replace("{" + "flagKey" + "}", localVarApiClient.escapeString(flagKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulesServiceOrderValidateBeforeCall(String namespaceKey, String flagKey, RuleOrderRequest ruleOrderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespaceKey' is set
        if (namespaceKey == null) {
            throw new ApiException("Missing the required parameter 'namespaceKey' when calling rulesServiceOrder(Async)");
        }

        // verify the required parameter 'flagKey' is set
        if (flagKey == null) {
            throw new ApiException("Missing the required parameter 'flagKey' when calling rulesServiceOrder(Async)");
        }

        // verify the required parameter 'ruleOrderRequest' is set
        if (ruleOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'ruleOrderRequest' when calling rulesServiceOrder(Async)");
        }

        return rulesServiceOrderCall(namespaceKey, flagKey, ruleOrderRequest, _callback);

    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param ruleOrderRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void rulesServiceOrder(String namespaceKey, String flagKey, RuleOrderRequest ruleOrderRequest) throws ApiException {
        rulesServiceOrderWithHttpInfo(namespaceKey, flagKey, ruleOrderRequest);
    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param ruleOrderRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> rulesServiceOrderWithHttpInfo(String namespaceKey, String flagKey, RuleOrderRequest ruleOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = rulesServiceOrderValidateBeforeCall(namespaceKey, flagKey, ruleOrderRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param ruleOrderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulesServiceOrderAsync(String namespaceKey, String flagKey, RuleOrderRequest ruleOrderRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulesServiceOrderValidateBeforeCall(namespaceKey, flagKey, ruleOrderRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for rulesServiceUpdate
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param id  (required)
     * @param ruleUpdateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulesServiceUpdateCall(String namespaceKey, String flagKey, String id, RuleUpdateRequest ruleUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ruleUpdateRequest;

        // create path and map variables
        String localVarPath = "/api/v1/namespaces/{namespaceKey}/flags/{flagKey}/rules/{id}"
            .replace("{" + "namespaceKey" + "}", localVarApiClient.escapeString(namespaceKey.toString()))
            .replace("{" + "flagKey" + "}", localVarApiClient.escapeString(flagKey.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulesServiceUpdateValidateBeforeCall(String namespaceKey, String flagKey, String id, RuleUpdateRequest ruleUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespaceKey' is set
        if (namespaceKey == null) {
            throw new ApiException("Missing the required parameter 'namespaceKey' when calling rulesServiceUpdate(Async)");
        }

        // verify the required parameter 'flagKey' is set
        if (flagKey == null) {
            throw new ApiException("Missing the required parameter 'flagKey' when calling rulesServiceUpdate(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling rulesServiceUpdate(Async)");
        }

        // verify the required parameter 'ruleUpdateRequest' is set
        if (ruleUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'ruleUpdateRequest' when calling rulesServiceUpdate(Async)");
        }

        return rulesServiceUpdateCall(namespaceKey, flagKey, id, ruleUpdateRequest, _callback);

    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param id  (required)
     * @param ruleUpdateRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void rulesServiceUpdate(String namespaceKey, String flagKey, String id, RuleUpdateRequest ruleUpdateRequest) throws ApiException {
        rulesServiceUpdateWithHttpInfo(namespaceKey, flagKey, id, ruleUpdateRequest);
    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param id  (required)
     * @param ruleUpdateRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> rulesServiceUpdateWithHttpInfo(String namespaceKey, String flagKey, String id, RuleUpdateRequest ruleUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = rulesServiceUpdateValidateBeforeCall(namespaceKey, flagKey, id, ruleUpdateRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param namespaceKey  (required)
     * @param flagKey  (required)
     * @param id  (required)
     * @param ruleUpdateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulesServiceUpdateAsync(String namespaceKey, String flagKey, String id, RuleUpdateRequest ruleUpdateRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulesServiceUpdateValidateBeforeCall(namespaceKey, flagKey, id, ruleUpdateRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
