/*
 * api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.46.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Segment;
import org.openapitools.client.model.SegmentCreateRequest;
import org.openapitools.client.model.SegmentList;
import org.openapitools.client.model.SegmentUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SegmentsServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SegmentsServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SegmentsServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for segmentsServiceCreate
     * @param namespaceKey  (required)
     * @param segmentCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call segmentsServiceCreateCall(String namespaceKey, SegmentCreateRequest segmentCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = segmentCreateRequest;

        // create path and map variables
        String localVarPath = "/api/v1/namespaces/{namespaceKey}/segments"
            .replace("{" + "namespaceKey" + "}", localVarApiClient.escapeString(namespaceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call segmentsServiceCreateValidateBeforeCall(String namespaceKey, SegmentCreateRequest segmentCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespaceKey' is set
        if (namespaceKey == null) {
            throw new ApiException("Missing the required parameter 'namespaceKey' when calling segmentsServiceCreate(Async)");
        }

        // verify the required parameter 'segmentCreateRequest' is set
        if (segmentCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'segmentCreateRequest' when calling segmentsServiceCreate(Async)");
        }

        return segmentsServiceCreateCall(namespaceKey, segmentCreateRequest, _callback);

    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param segmentCreateRequest  (required)
     * @return Segment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Segment segmentsServiceCreate(String namespaceKey, SegmentCreateRequest segmentCreateRequest) throws ApiException {
        ApiResponse<Segment> localVarResp = segmentsServiceCreateWithHttpInfo(namespaceKey, segmentCreateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param segmentCreateRequest  (required)
     * @return ApiResponse&lt;Segment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Segment> segmentsServiceCreateWithHttpInfo(String namespaceKey, SegmentCreateRequest segmentCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = segmentsServiceCreateValidateBeforeCall(namespaceKey, segmentCreateRequest, null);
        Type localVarReturnType = new TypeToken<Segment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param namespaceKey  (required)
     * @param segmentCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call segmentsServiceCreateAsync(String namespaceKey, SegmentCreateRequest segmentCreateRequest, final ApiCallback<Segment> _callback) throws ApiException {

        okhttp3.Call localVarCall = segmentsServiceCreateValidateBeforeCall(namespaceKey, segmentCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<Segment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for segmentsServiceDelete
     * @param namespaceKey  (required)
     * @param key  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call segmentsServiceDeleteCall(String namespaceKey, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/namespaces/{namespaceKey}/segments/{key}"
            .replace("{" + "namespaceKey" + "}", localVarApiClient.escapeString(namespaceKey.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call segmentsServiceDeleteValidateBeforeCall(String namespaceKey, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespaceKey' is set
        if (namespaceKey == null) {
            throw new ApiException("Missing the required parameter 'namespaceKey' when calling segmentsServiceDelete(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling segmentsServiceDelete(Async)");
        }

        return segmentsServiceDeleteCall(namespaceKey, key, _callback);

    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param key  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void segmentsServiceDelete(String namespaceKey, String key) throws ApiException {
        segmentsServiceDeleteWithHttpInfo(namespaceKey, key);
    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param key  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> segmentsServiceDeleteWithHttpInfo(String namespaceKey, String key) throws ApiException {
        okhttp3.Call localVarCall = segmentsServiceDeleteValidateBeforeCall(namespaceKey, key, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param namespaceKey  (required)
     * @param key  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call segmentsServiceDeleteAsync(String namespaceKey, String key, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = segmentsServiceDeleteValidateBeforeCall(namespaceKey, key, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for segmentsServiceGet
     * @param namespaceKey  (required)
     * @param key  (required)
     * @param reference  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call segmentsServiceGetCall(String namespaceKey, String key, String reference, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/namespaces/{namespaceKey}/segments/{key}"
            .replace("{" + "namespaceKey" + "}", localVarApiClient.escapeString(namespaceKey.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reference", reference));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call segmentsServiceGetValidateBeforeCall(String namespaceKey, String key, String reference, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespaceKey' is set
        if (namespaceKey == null) {
            throw new ApiException("Missing the required parameter 'namespaceKey' when calling segmentsServiceGet(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling segmentsServiceGet(Async)");
        }

        return segmentsServiceGetCall(namespaceKey, key, reference, _callback);

    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param key  (required)
     * @param reference  (optional)
     * @return Segment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Segment segmentsServiceGet(String namespaceKey, String key, String reference) throws ApiException {
        ApiResponse<Segment> localVarResp = segmentsServiceGetWithHttpInfo(namespaceKey, key, reference);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param key  (required)
     * @param reference  (optional)
     * @return ApiResponse&lt;Segment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Segment> segmentsServiceGetWithHttpInfo(String namespaceKey, String key, String reference) throws ApiException {
        okhttp3.Call localVarCall = segmentsServiceGetValidateBeforeCall(namespaceKey, key, reference, null);
        Type localVarReturnType = new TypeToken<Segment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param namespaceKey  (required)
     * @param key  (required)
     * @param reference  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call segmentsServiceGetAsync(String namespaceKey, String key, String reference, final ApiCallback<Segment> _callback) throws ApiException {

        okhttp3.Call localVarCall = segmentsServiceGetValidateBeforeCall(namespaceKey, key, reference, _callback);
        Type localVarReturnType = new TypeToken<Segment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for segmentsServiceList
     * @param namespaceKey  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param pageToken  (optional)
     * @param reference  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call segmentsServiceListCall(String namespaceKey, Integer limit, Integer offset, String pageToken, String reference, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/namespaces/{namespaceKey}/segments"
            .replace("{" + "namespaceKey" + "}", localVarApiClient.escapeString(namespaceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (reference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reference", reference));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call segmentsServiceListValidateBeforeCall(String namespaceKey, Integer limit, Integer offset, String pageToken, String reference, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespaceKey' is set
        if (namespaceKey == null) {
            throw new ApiException("Missing the required parameter 'namespaceKey' when calling segmentsServiceList(Async)");
        }

        return segmentsServiceListCall(namespaceKey, limit, offset, pageToken, reference, _callback);

    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param pageToken  (optional)
     * @param reference  (optional)
     * @return SegmentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SegmentList segmentsServiceList(String namespaceKey, Integer limit, Integer offset, String pageToken, String reference) throws ApiException {
        ApiResponse<SegmentList> localVarResp = segmentsServiceListWithHttpInfo(namespaceKey, limit, offset, pageToken, reference);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param pageToken  (optional)
     * @param reference  (optional)
     * @return ApiResponse&lt;SegmentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SegmentList> segmentsServiceListWithHttpInfo(String namespaceKey, Integer limit, Integer offset, String pageToken, String reference) throws ApiException {
        okhttp3.Call localVarCall = segmentsServiceListValidateBeforeCall(namespaceKey, limit, offset, pageToken, reference, null);
        Type localVarReturnType = new TypeToken<SegmentList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param namespaceKey  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param pageToken  (optional)
     * @param reference  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call segmentsServiceListAsync(String namespaceKey, Integer limit, Integer offset, String pageToken, String reference, final ApiCallback<SegmentList> _callback) throws ApiException {

        okhttp3.Call localVarCall = segmentsServiceListValidateBeforeCall(namespaceKey, limit, offset, pageToken, reference, _callback);
        Type localVarReturnType = new TypeToken<SegmentList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for segmentsServiceUpdate
     * @param namespaceKey  (required)
     * @param key  (required)
     * @param segmentUpdateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call segmentsServiceUpdateCall(String namespaceKey, String key, SegmentUpdateRequest segmentUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = segmentUpdateRequest;

        // create path and map variables
        String localVarPath = "/api/v1/namespaces/{namespaceKey}/segments/{key}"
            .replace("{" + "namespaceKey" + "}", localVarApiClient.escapeString(namespaceKey.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call segmentsServiceUpdateValidateBeforeCall(String namespaceKey, String key, SegmentUpdateRequest segmentUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespaceKey' is set
        if (namespaceKey == null) {
            throw new ApiException("Missing the required parameter 'namespaceKey' when calling segmentsServiceUpdate(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling segmentsServiceUpdate(Async)");
        }

        // verify the required parameter 'segmentUpdateRequest' is set
        if (segmentUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'segmentUpdateRequest' when calling segmentsServiceUpdate(Async)");
        }

        return segmentsServiceUpdateCall(namespaceKey, key, segmentUpdateRequest, _callback);

    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param key  (required)
     * @param segmentUpdateRequest  (required)
     * @return Segment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Segment segmentsServiceUpdate(String namespaceKey, String key, SegmentUpdateRequest segmentUpdateRequest) throws ApiException {
        ApiResponse<Segment> localVarResp = segmentsServiceUpdateWithHttpInfo(namespaceKey, key, segmentUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param key  (required)
     * @param segmentUpdateRequest  (required)
     * @return ApiResponse&lt;Segment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Segment> segmentsServiceUpdateWithHttpInfo(String namespaceKey, String key, SegmentUpdateRequest segmentUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = segmentsServiceUpdateValidateBeforeCall(namespaceKey, key, segmentUpdateRequest, null);
        Type localVarReturnType = new TypeToken<Segment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param namespaceKey  (required)
     * @param key  (required)
     * @param segmentUpdateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call segmentsServiceUpdateAsync(String namespaceKey, String key, SegmentUpdateRequest segmentUpdateRequest, final ApiCallback<Segment> _callback) throws ApiException {

        okhttp3.Call localVarCall = segmentsServiceUpdateValidateBeforeCall(namespaceKey, key, segmentUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<Segment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
