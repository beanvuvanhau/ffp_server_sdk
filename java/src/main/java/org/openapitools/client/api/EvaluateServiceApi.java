/*
 * api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.46.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BatchEvaluationRequest;
import org.openapitools.client.model.BatchEvaluationResponse;
import org.openapitools.client.model.EvaluationRequest;
import org.openapitools.client.model.EvaluationResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EvaluateServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EvaluateServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EvaluateServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for evaluateServiceBatchEvaluate
     * @param namespaceKey  (required)
     * @param batchEvaluationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call evaluateServiceBatchEvaluateCall(String namespaceKey, BatchEvaluationRequest batchEvaluationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchEvaluationRequest;

        // create path and map variables
        String localVarPath = "/api/v1/namespaces/{namespaceKey}/batch-evaluate"
            .replace("{" + "namespaceKey" + "}", localVarApiClient.escapeString(namespaceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call evaluateServiceBatchEvaluateValidateBeforeCall(String namespaceKey, BatchEvaluationRequest batchEvaluationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespaceKey' is set
        if (namespaceKey == null) {
            throw new ApiException("Missing the required parameter 'namespaceKey' when calling evaluateServiceBatchEvaluate(Async)");
        }

        // verify the required parameter 'batchEvaluationRequest' is set
        if (batchEvaluationRequest == null) {
            throw new ApiException("Missing the required parameter 'batchEvaluationRequest' when calling evaluateServiceBatchEvaluate(Async)");
        }

        return evaluateServiceBatchEvaluateCall(namespaceKey, batchEvaluationRequest, _callback);

    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param batchEvaluationRequest  (required)
     * @return BatchEvaluationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public BatchEvaluationResponse evaluateServiceBatchEvaluate(String namespaceKey, BatchEvaluationRequest batchEvaluationRequest) throws ApiException {
        ApiResponse<BatchEvaluationResponse> localVarResp = evaluateServiceBatchEvaluateWithHttpInfo(namespaceKey, batchEvaluationRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param batchEvaluationRequest  (required)
     * @return ApiResponse&lt;BatchEvaluationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchEvaluationResponse> evaluateServiceBatchEvaluateWithHttpInfo(String namespaceKey, BatchEvaluationRequest batchEvaluationRequest) throws ApiException {
        okhttp3.Call localVarCall = evaluateServiceBatchEvaluateValidateBeforeCall(namespaceKey, batchEvaluationRequest, null);
        Type localVarReturnType = new TypeToken<BatchEvaluationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param namespaceKey  (required)
     * @param batchEvaluationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call evaluateServiceBatchEvaluateAsync(String namespaceKey, BatchEvaluationRequest batchEvaluationRequest, final ApiCallback<BatchEvaluationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = evaluateServiceBatchEvaluateValidateBeforeCall(namespaceKey, batchEvaluationRequest, _callback);
        Type localVarReturnType = new TypeToken<BatchEvaluationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for evaluateServiceEvaluate
     * @param namespaceKey  (required)
     * @param evaluationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call evaluateServiceEvaluateCall(String namespaceKey, EvaluationRequest evaluationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = evaluationRequest;

        // create path and map variables
        String localVarPath = "/api/v1/namespaces/{namespaceKey}/evaluate"
            .replace("{" + "namespaceKey" + "}", localVarApiClient.escapeString(namespaceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call evaluateServiceEvaluateValidateBeforeCall(String namespaceKey, EvaluationRequest evaluationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespaceKey' is set
        if (namespaceKey == null) {
            throw new ApiException("Missing the required parameter 'namespaceKey' when calling evaluateServiceEvaluate(Async)");
        }

        // verify the required parameter 'evaluationRequest' is set
        if (evaluationRequest == null) {
            throw new ApiException("Missing the required parameter 'evaluationRequest' when calling evaluateServiceEvaluate(Async)");
        }

        return evaluateServiceEvaluateCall(namespaceKey, evaluationRequest, _callback);

    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param evaluationRequest  (required)
     * @return EvaluationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public EvaluationResponse evaluateServiceEvaluate(String namespaceKey, EvaluationRequest evaluationRequest) throws ApiException {
        ApiResponse<EvaluationResponse> localVarResp = evaluateServiceEvaluateWithHttpInfo(namespaceKey, evaluationRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param evaluationRequest  (required)
     * @return ApiResponse&lt;EvaluationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EvaluationResponse> evaluateServiceEvaluateWithHttpInfo(String namespaceKey, EvaluationRequest evaluationRequest) throws ApiException {
        okhttp3.Call localVarCall = evaluateServiceEvaluateValidateBeforeCall(namespaceKey, evaluationRequest, null);
        Type localVarReturnType = new TypeToken<EvaluationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param namespaceKey  (required)
     * @param evaluationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call evaluateServiceEvaluateAsync(String namespaceKey, EvaluationRequest evaluationRequest, final ApiCallback<EvaluationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = evaluateServiceEvaluateValidateBeforeCall(namespaceKey, evaluationRequest, _callback);
        Type localVarReturnType = new TypeToken<EvaluationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
