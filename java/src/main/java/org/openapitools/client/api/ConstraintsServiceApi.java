/*
 * api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.46.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Constraint;
import org.openapitools.client.model.ConstraintCreateRequest;
import org.openapitools.client.model.ConstraintUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConstraintsServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConstraintsServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConstraintsServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for constraintsServiceCreate
     * @param namespaceKey  (required)
     * @param segmentKey  (required)
     * @param constraintCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call constraintsServiceCreateCall(String namespaceKey, String segmentKey, ConstraintCreateRequest constraintCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = constraintCreateRequest;

        // create path and map variables
        String localVarPath = "/api/v1/namespaces/{namespaceKey}/segments/{segmentKey}/constraints"
            .replace("{" + "namespaceKey" + "}", localVarApiClient.escapeString(namespaceKey.toString()))
            .replace("{" + "segmentKey" + "}", localVarApiClient.escapeString(segmentKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call constraintsServiceCreateValidateBeforeCall(String namespaceKey, String segmentKey, ConstraintCreateRequest constraintCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespaceKey' is set
        if (namespaceKey == null) {
            throw new ApiException("Missing the required parameter 'namespaceKey' when calling constraintsServiceCreate(Async)");
        }

        // verify the required parameter 'segmentKey' is set
        if (segmentKey == null) {
            throw new ApiException("Missing the required parameter 'segmentKey' when calling constraintsServiceCreate(Async)");
        }

        // verify the required parameter 'constraintCreateRequest' is set
        if (constraintCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'constraintCreateRequest' when calling constraintsServiceCreate(Async)");
        }

        return constraintsServiceCreateCall(namespaceKey, segmentKey, constraintCreateRequest, _callback);

    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param segmentKey  (required)
     * @param constraintCreateRequest  (required)
     * @return Constraint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Constraint constraintsServiceCreate(String namespaceKey, String segmentKey, ConstraintCreateRequest constraintCreateRequest) throws ApiException {
        ApiResponse<Constraint> localVarResp = constraintsServiceCreateWithHttpInfo(namespaceKey, segmentKey, constraintCreateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param segmentKey  (required)
     * @param constraintCreateRequest  (required)
     * @return ApiResponse&lt;Constraint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Constraint> constraintsServiceCreateWithHttpInfo(String namespaceKey, String segmentKey, ConstraintCreateRequest constraintCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = constraintsServiceCreateValidateBeforeCall(namespaceKey, segmentKey, constraintCreateRequest, null);
        Type localVarReturnType = new TypeToken<Constraint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param namespaceKey  (required)
     * @param segmentKey  (required)
     * @param constraintCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call constraintsServiceCreateAsync(String namespaceKey, String segmentKey, ConstraintCreateRequest constraintCreateRequest, final ApiCallback<Constraint> _callback) throws ApiException {

        okhttp3.Call localVarCall = constraintsServiceCreateValidateBeforeCall(namespaceKey, segmentKey, constraintCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<Constraint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for constraintsServiceDelete
     * @param namespaceKey  (required)
     * @param segmentKey  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call constraintsServiceDeleteCall(String namespaceKey, String segmentKey, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/namespaces/{namespaceKey}/segments/{segmentKey}/constraints/{id}"
            .replace("{" + "namespaceKey" + "}", localVarApiClient.escapeString(namespaceKey.toString()))
            .replace("{" + "segmentKey" + "}", localVarApiClient.escapeString(segmentKey.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call constraintsServiceDeleteValidateBeforeCall(String namespaceKey, String segmentKey, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespaceKey' is set
        if (namespaceKey == null) {
            throw new ApiException("Missing the required parameter 'namespaceKey' when calling constraintsServiceDelete(Async)");
        }

        // verify the required parameter 'segmentKey' is set
        if (segmentKey == null) {
            throw new ApiException("Missing the required parameter 'segmentKey' when calling constraintsServiceDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling constraintsServiceDelete(Async)");
        }

        return constraintsServiceDeleteCall(namespaceKey, segmentKey, id, _callback);

    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param segmentKey  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void constraintsServiceDelete(String namespaceKey, String segmentKey, String id) throws ApiException {
        constraintsServiceDeleteWithHttpInfo(namespaceKey, segmentKey, id);
    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param segmentKey  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> constraintsServiceDeleteWithHttpInfo(String namespaceKey, String segmentKey, String id) throws ApiException {
        okhttp3.Call localVarCall = constraintsServiceDeleteValidateBeforeCall(namespaceKey, segmentKey, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param namespaceKey  (required)
     * @param segmentKey  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call constraintsServiceDeleteAsync(String namespaceKey, String segmentKey, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = constraintsServiceDeleteValidateBeforeCall(namespaceKey, segmentKey, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for constraintsServiceUpdate
     * @param namespaceKey  (required)
     * @param segmentKey  (required)
     * @param id  (required)
     * @param constraintUpdateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call constraintsServiceUpdateCall(String namespaceKey, String segmentKey, String id, ConstraintUpdateRequest constraintUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = constraintUpdateRequest;

        // create path and map variables
        String localVarPath = "/api/v1/namespaces/{namespaceKey}/segments/{segmentKey}/constraints/{id}"
            .replace("{" + "namespaceKey" + "}", localVarApiClient.escapeString(namespaceKey.toString()))
            .replace("{" + "segmentKey" + "}", localVarApiClient.escapeString(segmentKey.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call constraintsServiceUpdateValidateBeforeCall(String namespaceKey, String segmentKey, String id, ConstraintUpdateRequest constraintUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespaceKey' is set
        if (namespaceKey == null) {
            throw new ApiException("Missing the required parameter 'namespaceKey' when calling constraintsServiceUpdate(Async)");
        }

        // verify the required parameter 'segmentKey' is set
        if (segmentKey == null) {
            throw new ApiException("Missing the required parameter 'segmentKey' when calling constraintsServiceUpdate(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling constraintsServiceUpdate(Async)");
        }

        // verify the required parameter 'constraintUpdateRequest' is set
        if (constraintUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'constraintUpdateRequest' when calling constraintsServiceUpdate(Async)");
        }

        return constraintsServiceUpdateCall(namespaceKey, segmentKey, id, constraintUpdateRequest, _callback);

    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param segmentKey  (required)
     * @param id  (required)
     * @param constraintUpdateRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void constraintsServiceUpdate(String namespaceKey, String segmentKey, String id, ConstraintUpdateRequest constraintUpdateRequest) throws ApiException {
        constraintsServiceUpdateWithHttpInfo(namespaceKey, segmentKey, id, constraintUpdateRequest);
    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param segmentKey  (required)
     * @param id  (required)
     * @param constraintUpdateRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> constraintsServiceUpdateWithHttpInfo(String namespaceKey, String segmentKey, String id, ConstraintUpdateRequest constraintUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = constraintsServiceUpdateValidateBeforeCall(namespaceKey, segmentKey, id, constraintUpdateRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param namespaceKey  (required)
     * @param segmentKey  (required)
     * @param id  (required)
     * @param constraintUpdateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call constraintsServiceUpdateAsync(String namespaceKey, String segmentKey, String id, ConstraintUpdateRequest constraintUpdateRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = constraintsServiceUpdateValidateBeforeCall(namespaceKey, segmentKey, id, constraintUpdateRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
