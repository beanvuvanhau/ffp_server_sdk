/*
 * api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.46.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Flag;
import org.openapitools.client.model.FlagCreateRequest;
import org.openapitools.client.model.FlagList;
import org.openapitools.client.model.FlagUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FlagsServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FlagsServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FlagsServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for flagsServiceCreate
     * @param namespaceKey  (required)
     * @param flagCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flagsServiceCreateCall(String namespaceKey, FlagCreateRequest flagCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = flagCreateRequest;

        // create path and map variables
        String localVarPath = "/api/v1/namespaces/{namespaceKey}/flags"
            .replace("{" + "namespaceKey" + "}", localVarApiClient.escapeString(namespaceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flagsServiceCreateValidateBeforeCall(String namespaceKey, FlagCreateRequest flagCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespaceKey' is set
        if (namespaceKey == null) {
            throw new ApiException("Missing the required parameter 'namespaceKey' when calling flagsServiceCreate(Async)");
        }

        // verify the required parameter 'flagCreateRequest' is set
        if (flagCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'flagCreateRequest' when calling flagsServiceCreate(Async)");
        }

        return flagsServiceCreateCall(namespaceKey, flagCreateRequest, _callback);

    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param flagCreateRequest  (required)
     * @return Flag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Flag flagsServiceCreate(String namespaceKey, FlagCreateRequest flagCreateRequest) throws ApiException {
        ApiResponse<Flag> localVarResp = flagsServiceCreateWithHttpInfo(namespaceKey, flagCreateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param flagCreateRequest  (required)
     * @return ApiResponse&lt;Flag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Flag> flagsServiceCreateWithHttpInfo(String namespaceKey, FlagCreateRequest flagCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = flagsServiceCreateValidateBeforeCall(namespaceKey, flagCreateRequest, null);
        Type localVarReturnType = new TypeToken<Flag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param namespaceKey  (required)
     * @param flagCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flagsServiceCreateAsync(String namespaceKey, FlagCreateRequest flagCreateRequest, final ApiCallback<Flag> _callback) throws ApiException {

        okhttp3.Call localVarCall = flagsServiceCreateValidateBeforeCall(namespaceKey, flagCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<Flag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for flagsServiceDelete
     * @param namespaceKey  (required)
     * @param key  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flagsServiceDeleteCall(String namespaceKey, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/namespaces/{namespaceKey}/flags/{key}"
            .replace("{" + "namespaceKey" + "}", localVarApiClient.escapeString(namespaceKey.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flagsServiceDeleteValidateBeforeCall(String namespaceKey, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespaceKey' is set
        if (namespaceKey == null) {
            throw new ApiException("Missing the required parameter 'namespaceKey' when calling flagsServiceDelete(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling flagsServiceDelete(Async)");
        }

        return flagsServiceDeleteCall(namespaceKey, key, _callback);

    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param key  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void flagsServiceDelete(String namespaceKey, String key) throws ApiException {
        flagsServiceDeleteWithHttpInfo(namespaceKey, key);
    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param key  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> flagsServiceDeleteWithHttpInfo(String namespaceKey, String key) throws ApiException {
        okhttp3.Call localVarCall = flagsServiceDeleteValidateBeforeCall(namespaceKey, key, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param namespaceKey  (required)
     * @param key  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flagsServiceDeleteAsync(String namespaceKey, String key, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = flagsServiceDeleteValidateBeforeCall(namespaceKey, key, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for flagsServiceGet
     * @param namespaceKey  (required)
     * @param key  (required)
     * @param reference  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flagsServiceGetCall(String namespaceKey, String key, String reference, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/namespaces/{namespaceKey}/flags/{key}"
            .replace("{" + "namespaceKey" + "}", localVarApiClient.escapeString(namespaceKey.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reference", reference));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flagsServiceGetValidateBeforeCall(String namespaceKey, String key, String reference, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespaceKey' is set
        if (namespaceKey == null) {
            throw new ApiException("Missing the required parameter 'namespaceKey' when calling flagsServiceGet(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling flagsServiceGet(Async)");
        }

        return flagsServiceGetCall(namespaceKey, key, reference, _callback);

    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param key  (required)
     * @param reference  (optional)
     * @return Flag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Flag flagsServiceGet(String namespaceKey, String key, String reference) throws ApiException {
        ApiResponse<Flag> localVarResp = flagsServiceGetWithHttpInfo(namespaceKey, key, reference);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param key  (required)
     * @param reference  (optional)
     * @return ApiResponse&lt;Flag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Flag> flagsServiceGetWithHttpInfo(String namespaceKey, String key, String reference) throws ApiException {
        okhttp3.Call localVarCall = flagsServiceGetValidateBeforeCall(namespaceKey, key, reference, null);
        Type localVarReturnType = new TypeToken<Flag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param namespaceKey  (required)
     * @param key  (required)
     * @param reference  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flagsServiceGetAsync(String namespaceKey, String key, String reference, final ApiCallback<Flag> _callback) throws ApiException {

        okhttp3.Call localVarCall = flagsServiceGetValidateBeforeCall(namespaceKey, key, reference, _callback);
        Type localVarReturnType = new TypeToken<Flag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for flagsServiceList
     * @param namespaceKey  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param pageToken  (optional)
     * @param reference  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flagsServiceListCall(String namespaceKey, Integer limit, Integer offset, String pageToken, String reference, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/namespaces/{namespaceKey}/flags"
            .replace("{" + "namespaceKey" + "}", localVarApiClient.escapeString(namespaceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (reference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reference", reference));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flagsServiceListValidateBeforeCall(String namespaceKey, Integer limit, Integer offset, String pageToken, String reference, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespaceKey' is set
        if (namespaceKey == null) {
            throw new ApiException("Missing the required parameter 'namespaceKey' when calling flagsServiceList(Async)");
        }

        return flagsServiceListCall(namespaceKey, limit, offset, pageToken, reference, _callback);

    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param pageToken  (optional)
     * @param reference  (optional)
     * @return FlagList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FlagList flagsServiceList(String namespaceKey, Integer limit, Integer offset, String pageToken, String reference) throws ApiException {
        ApiResponse<FlagList> localVarResp = flagsServiceListWithHttpInfo(namespaceKey, limit, offset, pageToken, reference);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param pageToken  (optional)
     * @param reference  (optional)
     * @return ApiResponse&lt;FlagList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlagList> flagsServiceListWithHttpInfo(String namespaceKey, Integer limit, Integer offset, String pageToken, String reference) throws ApiException {
        okhttp3.Call localVarCall = flagsServiceListValidateBeforeCall(namespaceKey, limit, offset, pageToken, reference, null);
        Type localVarReturnType = new TypeToken<FlagList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param namespaceKey  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param pageToken  (optional)
     * @param reference  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flagsServiceListAsync(String namespaceKey, Integer limit, Integer offset, String pageToken, String reference, final ApiCallback<FlagList> _callback) throws ApiException {

        okhttp3.Call localVarCall = flagsServiceListValidateBeforeCall(namespaceKey, limit, offset, pageToken, reference, _callback);
        Type localVarReturnType = new TypeToken<FlagList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for flagsServiceUpdate
     * @param namespaceKey  (required)
     * @param key  (required)
     * @param flagUpdateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flagsServiceUpdateCall(String namespaceKey, String key, FlagUpdateRequest flagUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = flagUpdateRequest;

        // create path and map variables
        String localVarPath = "/api/v1/namespaces/{namespaceKey}/flags/{key}"
            .replace("{" + "namespaceKey" + "}", localVarApiClient.escapeString(namespaceKey.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flagsServiceUpdateValidateBeforeCall(String namespaceKey, String key, FlagUpdateRequest flagUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'namespaceKey' is set
        if (namespaceKey == null) {
            throw new ApiException("Missing the required parameter 'namespaceKey' when calling flagsServiceUpdate(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling flagsServiceUpdate(Async)");
        }

        // verify the required parameter 'flagUpdateRequest' is set
        if (flagUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'flagUpdateRequest' when calling flagsServiceUpdate(Async)");
        }

        return flagsServiceUpdateCall(namespaceKey, key, flagUpdateRequest, _callback);

    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param key  (required)
     * @param flagUpdateRequest  (required)
     * @return Flag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Flag flagsServiceUpdate(String namespaceKey, String key, FlagUpdateRequest flagUpdateRequest) throws ApiException {
        ApiResponse<Flag> localVarResp = flagsServiceUpdateWithHttpInfo(namespaceKey, key, flagUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param namespaceKey  (required)
     * @param key  (required)
     * @param flagUpdateRequest  (required)
     * @return ApiResponse&lt;Flag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Flag> flagsServiceUpdateWithHttpInfo(String namespaceKey, String key, FlagUpdateRequest flagUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = flagsServiceUpdateValidateBeforeCall(namespaceKey, key, flagUpdateRequest, null);
        Type localVarReturnType = new TypeToken<Flag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param namespaceKey  (required)
     * @param key  (required)
     * @param flagUpdateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flagsServiceUpdateAsync(String namespaceKey, String key, FlagUpdateRequest flagUpdateRequest, final ApiCallback<Flag> _callback) throws ApiException {

        okhttp3.Call localVarCall = flagsServiceUpdateValidateBeforeCall(namespaceKey, key, flagUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<Flag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
