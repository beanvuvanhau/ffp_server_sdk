/*
 * api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.46.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Distribution;
import org.openapitools.client.model.RuleSegmentOperator;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Rule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-31T13:29:42.404334+07:00[Asia/Ho_Chi_Minh]", comments = "Generator version: 7.9.0")
public class Rule {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAMESPACE_KEY = "namespaceKey";
  @SerializedName(SERIALIZED_NAME_NAMESPACE_KEY)
  private String namespaceKey;

  public static final String SERIALIZED_NAME_FLAG_KEY = "flagKey";
  @SerializedName(SERIALIZED_NAME_FLAG_KEY)
  private String flagKey;

  public static final String SERIALIZED_NAME_SEGMENT_KEY = "segmentKey";
  @SerializedName(SERIALIZED_NAME_SEGMENT_KEY)
  private String segmentKey;

  public static final String SERIALIZED_NAME_SEGMENT_KEYS = "segmentKeys";
  @SerializedName(SERIALIZED_NAME_SEGMENT_KEYS)
  private List<String> segmentKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEGMENT_OPERATOR = "segmentOperator";
  @SerializedName(SERIALIZED_NAME_SEGMENT_OPERATOR)
  private RuleSegmentOperator segmentOperator;

  public static final String SERIALIZED_NAME_DISTRIBUTIONS = "distributions";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTIONS)
  private List<Distribution> distributions = new ArrayList<>();

  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private Integer rank;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public Rule() {
  }

  public Rule id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Rule namespaceKey(String namespaceKey) {
    this.namespaceKey = namespaceKey;
    return this;
  }

  /**
   * Get namespaceKey
   * @return namespaceKey
   */
  @javax.annotation.Nonnull
  public String getNamespaceKey() {
    return namespaceKey;
  }

  public void setNamespaceKey(String namespaceKey) {
    this.namespaceKey = namespaceKey;
  }


  public Rule flagKey(String flagKey) {
    this.flagKey = flagKey;
    return this;
  }

  /**
   * Get flagKey
   * @return flagKey
   */
  @javax.annotation.Nonnull
  public String getFlagKey() {
    return flagKey;
  }

  public void setFlagKey(String flagKey) {
    this.flagKey = flagKey;
  }


  public Rule segmentKey(String segmentKey) {
    this.segmentKey = segmentKey;
    return this;
  }

  /**
   * Get segmentKey
   * @return segmentKey
   */
  @javax.annotation.Nonnull
  public String getSegmentKey() {
    return segmentKey;
  }

  public void setSegmentKey(String segmentKey) {
    this.segmentKey = segmentKey;
  }


  public Rule segmentKeys(List<String> segmentKeys) {
    this.segmentKeys = segmentKeys;
    return this;
  }

  public Rule addSegmentKeysItem(String segmentKeysItem) {
    if (this.segmentKeys == null) {
      this.segmentKeys = new ArrayList<>();
    }
    this.segmentKeys.add(segmentKeysItem);
    return this;
  }

  /**
   * Get segmentKeys
   * @return segmentKeys
   */
  @javax.annotation.Nullable
  public List<String> getSegmentKeys() {
    return segmentKeys;
  }

  public void setSegmentKeys(List<String> segmentKeys) {
    this.segmentKeys = segmentKeys;
  }


  public Rule segmentOperator(RuleSegmentOperator segmentOperator) {
    this.segmentOperator = segmentOperator;
    return this;
  }

  /**
   * Get segmentOperator
   * @return segmentOperator
   */
  @javax.annotation.Nonnull
  public RuleSegmentOperator getSegmentOperator() {
    return segmentOperator;
  }

  public void setSegmentOperator(RuleSegmentOperator segmentOperator) {
    this.segmentOperator = segmentOperator;
  }


  public Rule distributions(List<Distribution> distributions) {
    this.distributions = distributions;
    return this;
  }

  public Rule addDistributionsItem(Distribution distributionsItem) {
    if (this.distributions == null) {
      this.distributions = new ArrayList<>();
    }
    this.distributions.add(distributionsItem);
    return this;
  }

  /**
   * Get distributions
   * @return distributions
   */
  @javax.annotation.Nonnull
  public List<Distribution> getDistributions() {
    return distributions;
  }

  public void setDistributions(List<Distribution> distributions) {
    this.distributions = distributions;
  }


  public Rule rank(Integer rank) {
    this.rank = rank;
    return this;
  }

  /**
   * Get rank
   * @return rank
   */
  @javax.annotation.Nonnull
  public Integer getRank() {
    return rank;
  }

  public void setRank(Integer rank) {
    this.rank = rank;
  }


  public Rule createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Rule updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Rule rule = (Rule) o;
    return Objects.equals(this.id, rule.id) &&
        Objects.equals(this.namespaceKey, rule.namespaceKey) &&
        Objects.equals(this.flagKey, rule.flagKey) &&
        Objects.equals(this.segmentKey, rule.segmentKey) &&
        Objects.equals(this.segmentKeys, rule.segmentKeys) &&
        Objects.equals(this.segmentOperator, rule.segmentOperator) &&
        Objects.equals(this.distributions, rule.distributions) &&
        Objects.equals(this.rank, rule.rank) &&
        Objects.equals(this.createdAt, rule.createdAt) &&
        Objects.equals(this.updatedAt, rule.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, namespaceKey, flagKey, segmentKey, segmentKeys, segmentOperator, distributions, rank, createdAt, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Rule {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    namespaceKey: ").append(toIndentedString(namespaceKey)).append("\n");
    sb.append("    flagKey: ").append(toIndentedString(flagKey)).append("\n");
    sb.append("    segmentKey: ").append(toIndentedString(segmentKey)).append("\n");
    sb.append("    segmentKeys: ").append(toIndentedString(segmentKeys)).append("\n");
    sb.append("    segmentOperator: ").append(toIndentedString(segmentOperator)).append("\n");
    sb.append("    distributions: ").append(toIndentedString(distributions)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("namespaceKey");
    openapiFields.add("flagKey");
    openapiFields.add("segmentKey");
    openapiFields.add("segmentKeys");
    openapiFields.add("segmentOperator");
    openapiFields.add("distributions");
    openapiFields.add("rank");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("namespaceKey");
    openapiRequiredFields.add("flagKey");
    openapiRequiredFields.add("segmentKey");
    openapiRequiredFields.add("segmentOperator");
    openapiRequiredFields.add("distributions");
    openapiRequiredFields.add("rank");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("updatedAt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Rule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Rule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Rule is not found in the empty JSON string", Rule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Rule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Rule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Rule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("namespaceKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespaceKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespaceKey").toString()));
      }
      if (!jsonObj.get("flagKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flagKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flagKey").toString()));
      }
      if (!jsonObj.get("segmentKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `segmentKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("segmentKey").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("segmentKeys") != null && !jsonObj.get("segmentKeys").isJsonNull() && !jsonObj.get("segmentKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `segmentKeys` to be an array in the JSON string but got `%s`", jsonObj.get("segmentKeys").toString()));
      }
      // validate the required field `segmentOperator`
      RuleSegmentOperator.validateJsonElement(jsonObj.get("segmentOperator"));
      // ensure the json data is an array
      if (!jsonObj.get("distributions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `distributions` to be an array in the JSON string but got `%s`", jsonObj.get("distributions").toString()));
      }

      JsonArray jsonArraydistributions = jsonObj.getAsJsonArray("distributions");
      // validate the required field `distributions` (array)
      for (int i = 0; i < jsonArraydistributions.size(); i++) {
        Distribution.validateJsonElement(jsonArraydistributions.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Rule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Rule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Rule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Rule.class));

       return (TypeAdapter<T>) new TypeAdapter<Rule>() {
           @Override
           public void write(JsonWriter out, Rule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Rule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Rule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Rule
   * @throws IOException if the JSON string is invalid with respect to Rule
   */
  public static Rule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Rule.class);
  }

  /**
   * Convert an instance of Rule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

