/*
 * api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.46.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EvaluationReason;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VariantEvaluationResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-31T13:29:42.404334+07:00[Asia/Ho_Chi_Minh]", comments = "Generator version: 7.9.0")
public class VariantEvaluationResponse {
  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_MATCH = "match";
  @SerializedName(SERIALIZED_NAME_MATCH)
  private Boolean match;

  public static final String SERIALIZED_NAME_FLAG_KEY = "flagKey";
  @SerializedName(SERIALIZED_NAME_FLAG_KEY)
  private String flagKey;

  public static final String SERIALIZED_NAME_SEGMENT_KEYS = "segmentKeys";
  @SerializedName(SERIALIZED_NAME_SEGMENT_KEYS)
  private List<String> segmentKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_VARIANT_KEY = "variantKey";
  @SerializedName(SERIALIZED_NAME_VARIANT_KEY)
  private String variantKey;

  public static final String SERIALIZED_NAME_VARIANT_ATTACHMENT = "variantAttachment";
  @SerializedName(SERIALIZED_NAME_VARIANT_ATTACHMENT)
  private String variantAttachment;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_REQUEST_DURATION_MILLIS = "requestDurationMillis";
  @SerializedName(SERIALIZED_NAME_REQUEST_DURATION_MILLIS)
  private Double requestDurationMillis;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private EvaluationReason reason;

  public VariantEvaluationResponse() {
  }

  public VariantEvaluationResponse requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * Get requestId
   * @return requestId
   */
  @javax.annotation.Nonnull
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public VariantEvaluationResponse match(Boolean match) {
    this.match = match;
    return this;
  }

  /**
   * Get match
   * @return match
   */
  @javax.annotation.Nonnull
  public Boolean getMatch() {
    return match;
  }

  public void setMatch(Boolean match) {
    this.match = match;
  }


  public VariantEvaluationResponse flagKey(String flagKey) {
    this.flagKey = flagKey;
    return this;
  }

  /**
   * Get flagKey
   * @return flagKey
   */
  @javax.annotation.Nonnull
  public String getFlagKey() {
    return flagKey;
  }

  public void setFlagKey(String flagKey) {
    this.flagKey = flagKey;
  }


  public VariantEvaluationResponse segmentKeys(List<String> segmentKeys) {
    this.segmentKeys = segmentKeys;
    return this;
  }

  public VariantEvaluationResponse addSegmentKeysItem(String segmentKeysItem) {
    if (this.segmentKeys == null) {
      this.segmentKeys = new ArrayList<>();
    }
    this.segmentKeys.add(segmentKeysItem);
    return this;
  }

  /**
   * Get segmentKeys
   * @return segmentKeys
   */
  @javax.annotation.Nonnull
  public List<String> getSegmentKeys() {
    return segmentKeys;
  }

  public void setSegmentKeys(List<String> segmentKeys) {
    this.segmentKeys = segmentKeys;
  }


  public VariantEvaluationResponse variantKey(String variantKey) {
    this.variantKey = variantKey;
    return this;
  }

  /**
   * Get variantKey
   * @return variantKey
   */
  @javax.annotation.Nonnull
  public String getVariantKey() {
    return variantKey;
  }

  public void setVariantKey(String variantKey) {
    this.variantKey = variantKey;
  }


  public VariantEvaluationResponse variantAttachment(String variantAttachment) {
    this.variantAttachment = variantAttachment;
    return this;
  }

  /**
   * Get variantAttachment
   * @return variantAttachment
   */
  @javax.annotation.Nonnull
  public String getVariantAttachment() {
    return variantAttachment;
  }

  public void setVariantAttachment(String variantAttachment) {
    this.variantAttachment = variantAttachment;
  }


  public VariantEvaluationResponse timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public VariantEvaluationResponse requestDurationMillis(Double requestDurationMillis) {
    this.requestDurationMillis = requestDurationMillis;
    return this;
  }

  /**
   * Get requestDurationMillis
   * @return requestDurationMillis
   */
  @javax.annotation.Nonnull
  public Double getRequestDurationMillis() {
    return requestDurationMillis;
  }

  public void setRequestDurationMillis(Double requestDurationMillis) {
    this.requestDurationMillis = requestDurationMillis;
  }


  public VariantEvaluationResponse reason(EvaluationReason reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Get reason
   * @return reason
   */
  @javax.annotation.Nonnull
  public EvaluationReason getReason() {
    return reason;
  }

  public void setReason(EvaluationReason reason) {
    this.reason = reason;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VariantEvaluationResponse variantEvaluationResponse = (VariantEvaluationResponse) o;
    return Objects.equals(this.requestId, variantEvaluationResponse.requestId) &&
        Objects.equals(this.match, variantEvaluationResponse.match) &&
        Objects.equals(this.flagKey, variantEvaluationResponse.flagKey) &&
        Objects.equals(this.segmentKeys, variantEvaluationResponse.segmentKeys) &&
        Objects.equals(this.variantKey, variantEvaluationResponse.variantKey) &&
        Objects.equals(this.variantAttachment, variantEvaluationResponse.variantAttachment) &&
        Objects.equals(this.timestamp, variantEvaluationResponse.timestamp) &&
        Objects.equals(this.requestDurationMillis, variantEvaluationResponse.requestDurationMillis) &&
        Objects.equals(this.reason, variantEvaluationResponse.reason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestId, match, flagKey, segmentKeys, variantKey, variantAttachment, timestamp, requestDurationMillis, reason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VariantEvaluationResponse {\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    match: ").append(toIndentedString(match)).append("\n");
    sb.append("    flagKey: ").append(toIndentedString(flagKey)).append("\n");
    sb.append("    segmentKeys: ").append(toIndentedString(segmentKeys)).append("\n");
    sb.append("    variantKey: ").append(toIndentedString(variantKey)).append("\n");
    sb.append("    variantAttachment: ").append(toIndentedString(variantAttachment)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    requestDurationMillis: ").append(toIndentedString(requestDurationMillis)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("requestId");
    openapiFields.add("match");
    openapiFields.add("flagKey");
    openapiFields.add("segmentKeys");
    openapiFields.add("variantKey");
    openapiFields.add("variantAttachment");
    openapiFields.add("timestamp");
    openapiFields.add("requestDurationMillis");
    openapiFields.add("reason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("requestId");
    openapiRequiredFields.add("match");
    openapiRequiredFields.add("flagKey");
    openapiRequiredFields.add("segmentKeys");
    openapiRequiredFields.add("variantKey");
    openapiRequiredFields.add("variantAttachment");
    openapiRequiredFields.add("timestamp");
    openapiRequiredFields.add("requestDurationMillis");
    openapiRequiredFields.add("reason");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VariantEvaluationResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VariantEvaluationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VariantEvaluationResponse is not found in the empty JSON string", VariantEvaluationResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VariantEvaluationResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VariantEvaluationResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VariantEvaluationResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      if (!jsonObj.get("flagKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flagKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flagKey").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("segmentKeys") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("segmentKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `segmentKeys` to be an array in the JSON string but got `%s`", jsonObj.get("segmentKeys").toString()));
      }
      if (!jsonObj.get("variantKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variantKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variantKey").toString()));
      }
      if (!jsonObj.get("variantAttachment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variantAttachment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variantAttachment").toString()));
      }
      // validate the required field `reason`
      EvaluationReason.validateJsonElement(jsonObj.get("reason"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VariantEvaluationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VariantEvaluationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VariantEvaluationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VariantEvaluationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<VariantEvaluationResponse>() {
           @Override
           public void write(JsonWriter out, VariantEvaluationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VariantEvaluationResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VariantEvaluationResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VariantEvaluationResponse
   * @throws IOException if the JSON string is invalid with respect to VariantEvaluationResponse
   */
  public static VariantEvaluationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VariantEvaluationResponse.class);
  }

  /**
   * Convert an instance of VariantEvaluationResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

